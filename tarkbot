import rclpy
from rclpy.node import Node
from visualization_msgs.msg import Marker
from std_msgs.msg import Header
from tarkbot_robot.msg import Yolov8Inference
from geometry_msgs.msg import PointStamped
import math
from rclpy.duration import Duration

class MarkerPublisher(Node):
    def __init__(self):
        super().__init__('marker_publisher')

        # Đảm bảo không dùng sim time
        self.set_parameters([rclpy.parameter.Parameter('use_sim_time', rclpy.Parameter.Type.BOOL, False)])

        self.publisher = self.create_publisher(Marker, 'visualization_marker', 10)
        self.create_subscription(Yolov8Inference, '/Yolov8_Inference', self.yolo_callback, 10)

        self.detections = []
        self.timer = self.create_timer(1, self.timer_callback)
        self.active_marker_ids = set()

        # Cấu hình camera
        self.image_width = 640
        self.camera_fov_deg = 66.13
        self.camera_frame = 'base_link'  # Frame của camera

    def yolo_callback(self, msg):
        self.get_logger().info(f"Nhận {len(msg.yolov8_inference)} object từ YOLO")
        self.detections = [
            {
                "label": det.class_name,
                "distance": det.distance,
                "center_x": (det.left + det.right) / 2.0
            }
            for det in msg.yolov8_inference
        ]

    def get_position_from_yolo(self, detection):
        distance = detection["distance"] / 1000.0
        center_x = detection["center_x"]

        # Tính góc lệch từ tâm ảnh
        angle_offset_rad = ((center_x - self.image_width / 2.0) / (self.image_width / 2.0)) * \
                        math.radians(self.camera_fov_deg / 2.0)

        # Nếu không có distance, giả định 0.5m phía trước camera
        if distance <= 0:
            return None, None

        x = distance * math.cos(angle_offset_rad)
        y = distance * math.sin(angle_offset_rad)

        # Trả về vị trí tính toán từ frame camera
        return x, y

    def timer_callback(self):
        current_ids = set()

        for i, det in enumerate(self.detections):
            world_x, world_y = self.get_position_from_yolo(det)
            if world_x is None or world_y is None:
                self.get_logger().warn(f"Không thể xác định vị trí từ bounding box cho {det['label']}")
                continue

            marker = Marker()
            marker.header = Header()
            marker.header.stamp = self.get_clock().now().to_msg()
            marker.header.frame_id = self.camera_frame  # Để marker có thể ở frame camera

            marker.ns = "detections"
            marker.id = i
            marker.type = Marker.TEXT_VIEW_FACING
            marker.action = Marker.ADD

            marker.pose.position.x = float(world_x)
            marker.pose.position.y = float(world_y)
            marker.pose.position.z = 0.1

            marker.pose.orientation.x = 0.0
            marker.pose.orientation.y = 0.0
            marker.pose.orientation.z = 0.0
            marker.pose.orientation.w = 1.0


            marker.scale.x=0.1
            marker.scale.y=0.1
            marker.scale.z = 0.3
            if det["distance"] == -1:
                marker.text = f"{det['label']} (??m)"
            else:
                marker.text = f"{det['label']} ({det['distance']/1000.0:.2f}m)"

            marker.color.r = 1.0
            marker.color.g = 0.0
            marker.color.b = 0.0
            marker.color.a = 1.0

            marker.lifetime = Duration(seconds=0).to_msg()            
            self.publisher.publish(marker)
            current_ids.add(i)

            self.get_logger().info(
                f"Published marker for {det['label']} tại ({world_x:.2f}, {world_y:.2f})"
            )

        # # Xóa marker cũ không còn tồn tại
        # for old_id in self.active_marker_ids - current_ids:
        #     delete_marker = Marker()
        #     delete_marker.header.stamp = self.get_clock().now().to_msg()
        #     delete_marker.header.frame_id = self.camera_frame
        #     delete_marker.ns = "detections"
        #     delete_marker.id = old_id
        #     delete_marker.action = Marker.DELETE
        #     self.publisher.publish(delete_marker)
        #     self.get_logger().info(f"Xóa marker id: {old_id}")

        # self.active_marker_ids = current_ids


def main(args=None):
    rclpy.init(args=args)
    node = MarkerPublisher()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()
